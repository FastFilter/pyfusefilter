install:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip install --upgrade nose cibuildwheel;
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      pip install --user --upgrade nose cibuildwheel;
    fi

cache:
  - pip

branches:
  only:
  - master

env:
  global:
    - CIBW_BUILD_VERBOSITY=1
    - CIBW_TEST_REQUIRES=nose
    - CIBW_TEST_COMMAND="nosetests {project}/tests"
    - CIBW_BEFORE_BUILD="pip install cffi"
    - CIBW_BEFORE_ALL="python {project}/setup.py build"

matrix:
  include:
    ##### Linux #####
    ##### ARM #####
    ### 3.6 ###
    - name: "Python 3.6 on Linux arm64"
      arch:
        - arm64
      env:
        - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        - CIBW_BUILD="cp36-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ### 3.7 ###
    - name: "Python 3.7 on Linux arm64"
      arch:
        - arm64
      env:
        - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        - CIBW_BUILD="cp37-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
   ### 3.8 ###
    - name: "Python 3.8 on Linux arm64"
      arch:
        - arm64
      env:
        - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        - CIBW_BUILD="cp38-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ### 3.9 ###
    - name: "Python 3.9 on Linux arm64"
      arch:
        - arm64
      env:
        - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        - CIBW_BUILD="cp39-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ##### x86_64 #####
   ### 3.6 ###
    - name: "Python 3.6 on Linux amd64"
      arch:
        - amd64
      env:
        - CIBW_BUILD="cp36-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ### 3.7 ###
    - name: "Python 3.7 on Linux amd64"
      arch:
        - amd64
      env:
        - CIBW_BUILD="cp37-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ### 3.8 ###
    - name: "Python 3.8 on Linux amd64"
      arch:
        - amd64
      env:
        - CIBW_BUILD="cp38-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker
    ### 3.9 ###
    - name: "Python 3.9 on Linux amd64"
      arch:
        - amd64
      env:
        - CIBW_BUILD="cp39-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      python: "3.7"
      services:
        - docker

    ## Windows
    #    - name: "Python 3.6 on Windows"
    #      arch:
    #        - amd64
    #      env:
    #        - CIBW_BUILD="cp36-win*"
    #      os: windows
    #      language: shell
    #      before_install:
    #        - choco install python --version=3.6.8
    #        - python -m pip install --upgrade nose cibuildwheel
    #      env: PATH=/c/Python36:/c/Python36/Scripts:$PATH
    #
    #    - name: "Python 3.7 on Windows"
    #      arch:
    #        - amd64
    #      env:
    #        - CIBW_BUILD="cp37-win*"
    #      os: windows
    #      language: shell
    #      before_install:
    #        - choco install python --version=3.7.9
    #        - python -m pip install --upgrade nose cibuildwheel
    #      env: PATH=/c/Python37:/c/Python37/Scripts:$PATH
    #
    #    - name: "Python 3.8 on Windows"
    #      arch:
    #        - amd64
    #      env:
    #        - CIBW_BUILD="cp38-win*"
    #      os: windows
    #      language: shell
    #      before_install:
    #        - choco install python --version=3.8.7
    #        - python -m pip install --upgrade nose cibuildwheel
    #      env: PATH=/c/Python38:/c/Python38/Scripts:$PATH
    #
    #    - name: "Python 3.9 on Windows"
    #      arch:
    #        - amd64
    #      env:
    #        - CIBW_BUILD="cp39-win*"
    #      os: windows
    #      language: shell
    #      before_install:
    #        - choco install python --version=3.9.1
    #        - python -m pip install --upgrade nose cibuildwheel
    #      env: PATH=/c/Python39:/c/Python39/Scripts:$PATH

script:
  - cibuildwheel --output-dir wheelhouse
  - ls wheelhouse
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip3 install --upgrade pip;
      pip3 install --upgrade --upgrade-strategy eager twine;
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      pip install --user twine;
    elif [ "$TRAVIS_OS_NAME" = "windows" ]; then
      python -m pip install twine;
    fi
  - if [ "$PYPI_UPLOAD" = "test" -a "$TRAVIS_OS_NAME" = "windows" ]; then
      python -m twine upload --skip-existing wheelhouse/* --repository-url https://test.pypi.org/legacy/ -u ${TEST_PYPI_USR} -p ${TEST_PYPI_PWD};
    elif [ "$PYPI_UPLOAD" = "test" -a "$TRAVIS_OS_NAME" != "windows" ]; then
      twine upload --skip-existing wheelhouse/* --repository-url https://test.pypi.org/legacy/ -u ${TEST_PYPI_USR} -p ${TEST_PYPI_PWD};
    elif [ "$PYPI_UPLOAD" = "release" -a "$TRAVIS_OS_NAME" = "windows" ]; then
      python -m twine upload --skip-existing wheelhouse/* -u ${PYPI_USR} -p ${PYPI_PWD};
    elif [ "$PYPI_UPLOAD" = "release" -a "$TRAVIS_OS_NAME" != "windows" ]; then
      twine upload --skip-existing wheelhouse/* -u ${PYPI_USR} -p ${PYPI_PWD};
    fi
